"""
Django settings for backend_analytics_server project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-uke$%(xc^a1l3q7&b!mio!+^fvucwmvaghfib_i*34chd77oyz"

# PRODUCTION DETECTION
# Railway sets this environment variable automatically
IS_PRODUCTION = os.environ.get('RAILWAY_ENVIRONMENT_NAME') is not None

# DEBUG: False in production, True in development
DEBUG = not IS_PRODUCTION

# HOSTS CONFIGURATION
if IS_PRODUCTION:
    ALLOWED_HOSTS = ['.up.railway.app', 'localhost', '127.0.0.1']
    # Import PyMySQL only in production
    import pymysql
    pymysql.install_as_MySQLdb()
else:
    ALLOWED_HOSTS = ["*"]

# CSRF Configuration
CSRF_TRUSTED_ORIGINS = [
    "https://*.app.github.dev",  # Codespaces
    "https://localhost:8000",
    "http://127.0.0.1:8000"
]

if IS_PRODUCTION:
    CSRF_TRUSTED_ORIGINS.append("https://*.up.railway.app")

# Application definition
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "dashboard",
]

# MIDDLEWARE - Add WhiteNoise only in production
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
]

if IS_PRODUCTION:
    MIDDLEWARE.append("whitenoise.middleware.WhiteNoiseMiddleware")

MIDDLEWARE.extend([
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
])

ROOT_URLCONF = "backend_analytics_server.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, 'templates')],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "backend_analytics_server.wsgi.application"

# DATABASE CONFIGURATION - DUAL MODE
if IS_PRODUCTION:
    # Production: MySQL Database
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': os.environ.get('MYSQLDATABASE'),
            'USER': os.environ.get('MYSQLUSER'),
            'PASSWORD': os.environ.get('MYSQLPASSWORD'),
            'HOST': os.environ.get('MYSQLHOST'),
            'PORT': os.environ.get('MYSQLPORT'),
        }
    }
else:
    # Development: SQLite Database
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True

# STATIC FILES CONFIGURATION
STATIC_URL = "static/"
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]

if IS_PRODUCTION:
    # Production: WhiteNoise configuration
    STATIC_ROOT = BASE_DIR / 'assets'
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# External API Configuration
API_URL = "https://jsonplaceholder.typicode.com/posts"

# Authentication Configuration
LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = '/'

# Default primary key field type
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# DEBUG INFO
if DEBUG:
    print(f"üîß RUNNING IN: {'PRODUCTION' if IS_PRODUCTION else 'DEVELOPMENT'}")
    print(f"üóÑÔ∏è DATABASE: {'MySQL' if IS_PRODUCTION else 'SQLite'}")
    print(f"üêõ DEBUG MODE: {DEBUG}")
